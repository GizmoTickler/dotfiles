# Zsh configuration
# This file provides basic zsh setup with starship prompt

# Initialize starship prompt
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# Basic zsh options
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# Enable completions
autoload -Uz compinit
compinit

# Environment variables
export EDITOR="{{ .tools.editor }}"
export VISUAL="$EDITOR"
export KUBE_EDITOR="$EDITOR"

# Language settings
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Development environment
export ANSIBLE_FORCE_COLOR=true
export ANSIBLE_HOST_KEY_CHECKING=False
export PY_COLORS=true

# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Python configuration
export PYTHONPATH="$HOME/.local/lib/python"

# Node.js configuration
export NPM_CONFIG_PREFIX="$HOME/.npm-global"

# Rust configuration
export CARGO_HOME="$HOME/.cargo"

# Kubernetes configuration
{{- if .onepassword.enabled }}
# When 1Password is enabled, use local config but can retrieve from 1Password
export KUBECONFIG="$HOME/.kube/config"
export TALOSCONFIG="$HOME/.talos/config"
{{- else }}
# Set default configs if they exist
[[ -f "$HOME/.kube/config" ]] && export KUBECONFIG="$HOME/.kube/config"
[[ -f "$HOME/.talos/config" ]] && export TALOSCONFIG="$HOME/.talos/config"
{{- end }}

# SOPS configuration
{{- if .onepassword.enabled }}
# When 1Password is enabled, use local age key file but can retrieve from 1Password
export SOPS_AGE_KEY_FILE="$HOME/.config/sops/age/age.key"
{{- else }}
# Use local age key file if exists
[[ -f "$HOME/.config/sops/age/age.key" ]] && export SOPS_AGE_KEY_FILE="$HOME/.config/sops/age/age.key"
{{- end }}

# 1Password SSH Agent configuration
{{- if .onepassword.enabled }}
# Set SSH_AUTH_SOCK to use 1Password's SSH agent
export SSH_AUTH_SOCK="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
{{- end }}

# Add common paths to PATH
path+=("$HOME/.local/bin")
path+=("$HOME/.cargo/bin")

path+=("$HOME/.npm-global/bin")
path+=("$HOME/.krew/bin")
export PATH

# Atuin - Shell history sync
if command -v atuin >/dev/null 2>&1; then
    {{- if .tools.atuin_sync_address }}
    # Set sync address from 1Password
    export ATUIN_SYNC_ADDRESS="{{ .tools.atuin_sync_address }}"
    {{- end }}

    # Initialize Atuin for Zsh
    eval "$(atuin init zsh)"
fi

# Serena MCP Server functions for Claude
serena-install() {
    # Get the current working directory
    local project_dir=$(pwd)

    # Run the Claude MCP add command with Serena
    echo "ü§ñ Installing Serena MCP server for Claude in: $project_dir"
    claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena start-mcp-server --context ide-assistant --project "$project_dir"

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Serena MCP server installed successfully!"
        echo "   You can now use Serena's intelligent code tools in Claude."
    else
        echo "‚ùå Failed to install Serena MCP server"
        return 1
    fi
}

serena-remove() {
    echo "üóëÔ∏è  Removing Serena MCP server from Claude..."
    claude mcp remove serena

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Serena MCP server removed successfully!"
    else
        echo "‚ùå Failed to remove Serena MCP server"
        return 1
    fi
}

serena-status() {
    echo "üîç Checking Serena MCP server status..."
    claude mcp list | grep -q serena

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Serena MCP server is installed"
        claude mcp list | grep serena
    else
        echo "‚ùå Serena MCP server is not installed"
        echo "   Run 'serena-install' to install it for the current project"
    fi
}

serena() {
    if [[ $# -eq 0 ]]; then
        # Default to install if no arguments
        serena-install
    else
        case "$1" in
            install)
                serena-install
                ;;
            remove)
                serena-remove
                ;;
            status)
                serena-status
                ;;
            help|*)
                echo "Serena MCP Server Manager for Claude"
                echo ""
                echo "Usage:"
                echo "  serena [command]"
                echo ""
                echo "Commands:"
                echo "  install  - Install Serena MCP server for the current project (default)"
                echo "  remove   - Remove Serena MCP server from Claude"
                echo "  status   - Check if Serena MCP server is installed"
                echo "  help     - Show this help message"
                echo ""
                echo "Examples:"
                echo "  serena                  # Install for current project"
                echo "  serena install          # Install for current project"
                echo "  serena remove           # Remove Serena"
                echo "  serena status           # Check installation status"
                ;;
        esac
    fi
}