# 1Password CLI integration for Fish shell
{{- if .onepassword.enabled }}

# Load environment variables from bash-style .env file (if it exists)
if test -f {{ .chezmoi.homeDir }}/.env
    # Parse bash-style exports and convert to Fish syntax
    for line in (cat {{ .chezmoi.homeDir }}/.env | grep '^export ' | sed 's/^export //')
        set -l var_and_val (string split '=' -- $line)
        if test (count $var_and_val) -eq 2
            set -gx $var_and_val[1] (string replace -a '"' '' -- $var_and_val[2])
        end
    end
end

# 1Password SSH Agent configuration
# Set the SSH_AUTH_SOCK to use 1Password's SSH agent
set -gx SSH_AUTH_SOCK ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

# Helper function to check 1Password CLI status
function op_status --description "Check 1Password CLI signin status"
    if op account list >/dev/null 2>&1
        echo "‚úÖ 1Password CLI: Signed in"
        op account list
        
        # Check SSH agent status
        if test -S ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
            echo "‚úÖ 1Password SSH Agent: Running"
        else
            echo "‚ùå 1Password SSH Agent: Not running"
        end
    else
        echo "‚ùå 1Password CLI: Not signed in"
        echo "Sign in with: op signin"
    end
end

# Quick 1Password item retrieval
function op_get --description "Get item from 1Password"
    if test (count $argv) -lt 1
        echo "Usage: op_get <item_name> [field_name]"
        return 1
    end
    
    set item $argv[1]
    set field password
    if test (count $argv) -gt 1
        set field $argv[2]
    end
    
    op item get "$item" --field "$field" 2>/dev/null
end

# Load secrets into environment (secure)
function op_load_env --description "Load environment variables from 1Password"
    echo "üí° Load secrets into your Fish session:"
    echo "   set -gx GITHUB_TOKEN (op_get 'GitHub Personal Access Token')"
    echo "   set -gx OPENAI_API_KEY (op_get 'OpenAI API Key')" 
    echo ""
    echo "üîç Search your items: op item list | grep -i <search_term>"
end

# Kubernetes config helpers
function op_kubeconfig_sync --description "Sync kubeconfig from 1Password to local file"
    mkdir -p {{ .chezmoi.homeDir }}/.kube
    if op document get "ruvghlnn7hm7eiehqpkerazce4" --vault="Private" --output={{ .chezmoi.homeDir }}/.kube/config --force 2>/dev/null
        echo "‚úÖ Synced kubeconfig from 1Password to ~/.kube/config"
        chmod 600 {{ .chezmoi.homeDir }}/.kube/config
    else
        echo "‚ùå Failed to sync kubeconfig from 1Password" >&2
        return 1
    end
end

function op_talosconfig_sync --description "Sync talosconfig from 1Password to local file"
    mkdir -p {{ .chezmoi.homeDir }}/.talos
    if op document get "kcc224lknkq5sgjvumxccuvlf4" --vault="Private" --output={{ .chezmoi.homeDir }}/.talos/config --force 2>/dev/null
        echo "‚úÖ Synced talosconfig from 1Password to ~/.talos/config"
        chmod 600 {{ .chezmoi.homeDir }}/.talos/config
    else
        echo "‚ùå Failed to sync talosconfig from 1Password" >&2
        return 1
    end
end

# SOPS age key sync
function op_sops_sync --description "Sync SOPS age key from 1Password to local file"
    mkdir -p {{ .chezmoi.homeDir }}/.config/sops/age
    if op document get "pxgfdtrswhiwwsrewe7flslr7q" --vault="Private" --output={{ .chezmoi.homeDir }}/.config/sops/age/age.key --force 2>/dev/null
        echo "‚úÖ Synced SOPS age key from 1Password to ~/.config/sops/age/age.key"
        chmod 600 {{ .chezmoi.homeDir }}/.config/sops/age/age.key
    else
        echo "‚ùå Failed to sync SOPS age key from 1Password" >&2
        echo "   Make sure to upload your age.key to 1Password and update the item ID in this function"
        return 1
    end
end

# Sync all Kubernetes configs from 1Password
function op_k8s_sync --description "Sync all Kubernetes and SOPS configs from 1Password"
    echo "üì¶ Syncing configs from 1Password..."
    op_kubeconfig_sync
    op_talosconfig_sync
    op_sops_sync
end

# kubectl with temporary config from 1Password
function kubectl_op --description "Run kubectl with config directly from 1Password"
    set -l tmpfile (mktemp)
    if op document get "ruvghlnn7hm7eiehqpkerazce4" --vault="Private" --output=$tmpfile 2>/dev/null
        kubectl --kubeconfig=$tmpfile $argv
        rm -f $tmpfile
    else
        echo "‚ùå Failed to retrieve kubeconfig from 1Password" >&2
        rm -f $tmpfile
        return 1
    end
end

# talosctl with temporary config from 1Password
function talosctl_op --description "Run talosctl with config directly from 1Password"
    set -l tmpfile (mktemp)
    if op document get "kcc224lknkq5sgjvumxccuvlf4" --vault="Private" --output=$tmpfile 2>/dev/null
        talosctl --talosconfig=$tmpfile $argv
        rm -f $tmpfile
    else
        echo "‚ùå Failed to retrieve talosconfig from 1Password" >&2
        rm -f $tmpfile
        return 1
    end
end

{{- else }}

# 1Password CLI not available
function op_status --description "1Password CLI status (not available)"
    echo "‚ùå 1Password CLI not installed"
    echo "Install with: brew install 1password-cli"
end

function op_get --description "1Password CLI not available"
    echo "‚ùå 1Password CLI not installed"
    return 1
end

{{- end }}